{"version":3,"sources":["logo.png","guide/step1.jpg","guide/step2.jpg","guide/step3.jpg","guide/step4.jpg","guide/step5.jpg","metric_bg/bg1.jpg","metric_bg/bg2.jpg","metric_bg/bg3.jpg","metric_bg/bg4.jpg","metric_bg/bg5.jpg","metric_bg/bg6.jpg","backend/Analyzer.js","HelpModal.js","Main.js","MetricGraphing.js","MetricNumerical.js","MetricInterface.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Analyzer","rawTextFile","startPipeline","a","parseRawTextFile","messageArray","messageDF","createDF","generateMetrics","generateComments","textFileParser","require","parseString","rows","i","len","length","author","push","date","message","DataFrame","columns","filter","get","notnull","computeAvg","arr","dp","parseFloat","reduce","b","toFixed","filterDatetimes","datetimes","timings","CUTOFF_MIN_HOURS","CUTOFF_MAX_HOURS","datetimes_filtered","timings_filtered","df","sOne","unique","toArray","sort","sTwo","dfOne","eq","reset_index","drop","dfTwo","generateCount","sOneMsgCount","sOneWordCount","sOneWPMCount","sOneMediaCount","sTwoMsgCount","sTwoWordCount","sTwoWPMCount","sTwoMediaCount","TDDict","generateReplyTimings","sOneTimings","sOneDatetimes","sTwoTimings","sTwoDatetimes","sOneAverageRT","sTwoAverageRT","startDate","Date","Math","min","toDateString","endDate","max","senderDf","senderMsgCount","senderWordCount","map","c","split","sum","dfCols","colLength","rowSubset","iloc","values","sender","set","diff","div","generateMessageComments","MIN","MAX","DIFF","MESSAGE_LOW","parseInt","MESSAGE_HIGH","sOneMsgComment","sTwoMsgComment","generateWordComments","WORD_LOW","WORD_HIGH","sOneWordComment","sTwoWordComment","generateWPMComments","WPM_LOW","WPM_HIGH","sOneWPMComment","sTwoWPMComment","generateMediaComments","MEDIA_LOW","MEDIA_HIGH","sOneMediaComment","sTwoMediaComment","generateAverageRTComments","AVERAGE_RT_LOW","AVERAGE_RT_HIGH","sOneAverageRTComment","sTwoAverageRTComment","this","HelpModal","props","toggleHelpModalOneTwo","toggleHelpModalStepOne","toggleHelpModalStepTwo","toggleHelpModalTwoThree","toggleHelpModalStepThree","toggleHelpModalThreeFour","toggleHelpModalStepFour","toggleHelpModalFourFive","toggleHelpModalStepFive","useModali","animated","centered","large","title","buttons","Button","isStyleDefault","label","onClick","helpModalStepOne","helpModalStepTwo","helpModalStepThree","helpModalStepFour","uploadOverlayClickHandler","helpModalStepFive","className","id","Modal","alt","src","step1","step2","step3","step4","step5","Main","logo","type","onChange","uploadBtnClickHandler","helpBtnClickHandler","showModal","showHelp","Component","MetricGraphing","state","chartWidth","chartHeight","sOneData","sTwoData","generateData","sOneX","sOneY","sTwoX","sTwoY","x","y","setState","tooltipScatter","console","log","data","width","height","margin","top","bottom","left","right","tooltipHtml","xAxis","yAxis","MetricNumerical","index","sOneMetric","sOneComment","sTwoMetric","sTwoComment","MetricInterface","graphing","App","uploadedFile","rawText","analyzer","showMain","showMetric","___","document","getElementById","click","event","target","files","_","generateRawText","reader","FileReader","onload","e","result","readAsText","generateAnalyzer","prevProps","prevState","snapshot","animation","data-src","bg1","bg2","bg3","bg4","bg5","bg6","override","css","size","color","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.474554e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.df1e901b.png\";","module.exports = __webpack_public_path__ + \"static/media/step1.d56fbd6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/step2.497f7d35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/step3.06808f03.jpg\";","module.exports = __webpack_public_path__ + \"static/media/step4.0c896e0b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/step5.e5e2e3ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg1.a518315f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg2.8605a442.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg3.424e7273.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg4.8705daf5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg5.2ad1b05a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg6.1043f8bb.jpg\";","import {DataFrame} from \"pandas-js\";\n\n\nclass Analyzer {\n    constructor(rawTextFile) {\n        this.rawTextFile = rawTextFile;\n        this.startDate = null;\n        this.endDate = null;\n        /////////////////////////METRICS (SENDER ONE)/////////////////////////\n        this.sOne = null;\n        this.dfOne = null;\n        this.sOneMsgCount = null;\n        this.sOneWordCount = null;\n        this.sOneWPMCount = null;\n        this.sOneMediaCount = null;\n        this.sOneMsgComment = null;\n        this.sOneWordComment = null;\n        this.sOneWPMComment = null;\n        this.sOneMediaComment = null;\n        this.sOneAverageRTComment = null;\n        this.sOneDatetimes = null;\n        this.sOneTimings = null;\n        this.sOneAverageRT = null;\n\n        /////////////////////////METRICS (SENDER TWO)/////////////////////////\n        this.sTwo = null;\n        this.dfTwo = null;\n        this.sTwoMsgCount = null;\n        this.sTwoWordCount = null;\n        this.sTwoWPMCount = null;\n        this.sTwoMediaCount = null;\n        this.sTwoMsgComment = null;\n        this.sTwoWordComment = null;\n        this.sTwoWPMComment = null;\n        this.sTwoMediaComment = null;\n        this.sTwoAverageRTComment = null;\n        this.sTwoDatetimes = null;\n        this.sTwoTimings = null;\n        this.sTwoAverageRT = null;\n    }\n\n    startPipeline = async () => {\n        const messageArray = await this.parseRawTextFile(this.rawTextFile)\n        const messageDF = this.createDF(messageArray);\n        this.generateMetrics(messageDF);\n        this.generateComments();\n    };\n\n    parseRawTextFile = async (rawTextFile) => {\n        const textFileParser = require('whatsapp-chat-parser');\n        return await textFileParser.parseString(rawTextFile);\n    };\n\n    createDF = messageArray => {\n        // SETUP 2D ARRAY TO HOLD THE ROWS OF THE DF\n        const rows = [];\n\n        // POPULATE THESE ROWS\n        for (let i = 0, len = messageArray.length; i < len; i++) {\n            if (messageArray[i].author !== \"System\") {\n                rows.push([messageArray[i].date, messageArray[i].author, messageArray[i].message]);\n            }\n        }\n\n        // CREATE THE PANDAS DF\n        let messageDF = new DataFrame(rows);\n        messageDF.columns = [\"datetime\", \"sender\", \"message\"];\n\n        // CLEAN THE DF\n        messageDF = messageDF.filter(messageDF.get(\"datetime\").notnull());\n        messageDF = messageDF.filter(messageDF.get(\"sender\").notnull());\n        messageDF = messageDF.filter(messageDF.get(\"message\").notnull());\n        return messageDF;\n    };\n\n    computeAvg = (arr, dp = 1) => {\n        return parseFloat(\n            ((arr => arr.reduce((a, b) => a + b, 0))(arr) / arr.length).toFixed(dp)\n        );\n    };\n\n    filterDatetimes = (\n        datetimes,\n        timings,\n        CUTOFF_MIN_HOURS = 0.016666, // IE. 1 MINUTE\n        CUTOFF_MAX_HOURS = 168 // IE. 7 DAYS\n    ) => {\n        const datetimes_filtered = [];\n        const timings_filtered = [];\n        for (let i = 0; i < datetimes.length; i++) {\n            if (timings[i] >= CUTOFF_MIN_HOURS && timings[i] <= CUTOFF_MAX_HOURS) {\n                datetimes_filtered.push(datetimes[i]);\n                timings_filtered.push(timings[i]);\n            }\n        }\n        return [datetimes_filtered, timings_filtered];\n    };\n\n    generateMetrics = df => {\n        // SENDERS\n        this.sOne = df\n            .get(\"sender\")\n            .unique()\n            .toArray()\n            .sort()[0];\n        this.sTwo = df\n            .get(\"sender\")\n            .unique()\n            .toArray()\n            .sort()[1];\n\n\n        // DF SEPARATED BY SENDER\n        this.dfOne = df\n            .filter(df.get(\"sender\").eq(this.sOne))\n            .reset_index({drop: true});\n        this.dfTwo = df\n            .filter(df.get(\"sender\").eq(this.sTwo))\n            .reset_index({drop: true});\n\n        // GET METRICS FOR EACH SENDER\n        [\n            this.sOneMsgCount,\n            this.sOneWordCount,\n            this.sOneWPMCount,\n            this.sOneMediaCount,\n        ] = this.generateCount(this.dfOne);\n        [\n            this.sTwoMsgCount,\n            this.sTwoWordCount,\n            this.sTwoWPMCount,\n            this.sTwoMediaCount,\n        ] = this.generateCount(this.dfTwo);\n\n\n        // REPLY TIMING COUNT AND THEIR AVERAGE\n        const TDDict = this.generateReplyTimings(df);\n        this.sOneTimings = TDDict[this.sOne][0];\n        this.sOneDatetimes = TDDict[this.sOne][1];\n        this.sTwoTimings = TDDict[this.sTwo][0];\n        this.sTwoDatetimes = TDDict[this.sTwo][1];\n\n\n        // FILTER REPLY TIMINGS\n        [this.sOneDatetimes, this.sOneTimings] = this.filterDatetimes(\n            this.sOneDatetimes,\n            this.sOneTimings\n        );\n        [this.sTwoDatetimes, this.sTwoTimings] = this.filterDatetimes(\n            this.sTwoDatetimes,\n            this.sTwoTimings\n        );\n\n        // COMPUTE AVERAGE REPLY TIMINGS\n        this.sOneAverageRT = this.computeAvg(this.sOneTimings);\n        this.sTwoAverageRT = this.computeAvg(this.sTwoTimings);\n\n        // START AND END DATE OF CONVERSATION\n        this.startDate = new Date(\n            Math.min(this.sOneDatetimes[0], this.sTwoDatetimes[0])\n        ).toDateString();\n        this.endDate = new Date(\n            Math.max(\n                this.sOneDatetimes[this.sOneDatetimes.length - 1],\n                this.sTwoDatetimes[this.sTwoDatetimes.length - 1]\n            )\n        ).toDateString();\n    };\n\n    generateCount = senderDf => {\n        // 1. MESSAGE COUNT\n        const senderMsgCount = senderDf.length;\n\n        // 2. WORD COUNT\n        const senderWordCount = senderDf\n            .get(\"message\")\n            .map(c => c.split(\" \").length)\n            .sum();\n\n        // 3. WPM COUNT\n        const senderWPMCount = parseFloat(\n            (senderWordCount / senderMsgCount).toFixed(1)\n        );\n\n        // 4. MEDIA COUNT\n        const senderMediaCount = senderDf.filter(\n            senderDf.get(\"message\").eq(\"<Media omitted>\")\n        ).length;\n\n        // RETURN ALL METRICS\n        return [\n            senderMsgCount,\n            senderWordCount,\n            senderWPMCount,\n            senderMediaCount,\n        ];\n    };\n\n    generateReplyTimings = df => {\n        // GET COLUMN NAMES\n        const dfCols = df.columns;\n        const colLength = dfCols.toArray().length;\n\n        // DROP ALL DUPLICATES ALONG ROLLING WINDOW\n        const rowSubset = [df.iloc(0, [0, colLength]).values.toArray()[0].toArray()];\n\n        // TODO : GENERATE NEW WAY OF LOOPING\n        for (let i=1, sender=df.get('sender'), len=sender.length; i<len; i++) {\n            if (sender.iloc(i) !== sender.iloc(i - 1)) {\n                rowSubset.push(df.iloc(i, [0, colLength]).values.toArray()[0].toArray());\n            }\n        }\n\n        df = new DataFrame(rowSubset);\n        df.columns = dfCols.toArray();\n\n\n        // GET THE RESPECTIVE SENDERS\n        const sOne = df.get(\"sender\").iloc(0);\n        const sTwo = df.get(\"sender\").iloc(1);\n\n\n        // SET THE REPLY TIMINGS COLUMN\n        df = df.set(\n            \"reply_timing\",\n            df\n                .get(\"datetime\")\n                .diff()\n                .div(1000 * 3600) // MS TO HOURS\n        );\n\n        // GET THE RESPECTIVE REPLY DATAFRAMES\n        const dfOne = df.filter(df.get(\"sender\").eq(sOne));\n        const dfTwo = df.filter(df.get(\"sender\").eq(sTwo));\n\n        return {\n            [sOne]: [\n                dfOne.get(\"reply_timing\").values.toArray(),\n                dfOne.get(\"datetime\").values.toArray()\n            ],\n            [sTwo]: [\n                dfTwo.get(\"reply_timing\").values.toArray(),\n                dfTwo.get(\"datetime\").values.toArray()\n            ]\n        };\n    };\n\n    generateMessageComments = () => {\n        const MIN = Math.min(this.sOneMsgCount, this.sTwoMsgCount);\n        const MAX = Math.max(this.sOneMsgCount, this.sTwoMsgCount);\n        const DIFF = MAX - MIN;\n        const MESSAGE_LOW = sender =>\n            `On average, ${sender} sends 🥈${parseInt(\n                (DIFF / MAX) * 100\n            )}% fewer🥈 messages.`;\n        const MESSAGE_HIGH = sender =>\n            `On average, ${sender} sends 🥇${parseInt(\n                (DIFF / MIN) * 100\n            )}% more🥇 messages.`;\n        this.sOneMsgComment =\n            this.sOneMsgCount >= this.sTwoMsgCount\n                ? MESSAGE_HIGH(this.sOne)\n                : MESSAGE_LOW(this.sOne);\n        this.sTwoMsgComment =\n            this.sTwoMsgCount >= this.sOneMsgCount\n                ? MESSAGE_HIGH(this.sTwo)\n                : MESSAGE_LOW(this.sTwo);\n    };\n\n    generateWordComments = () => {\n        const MIN = Math.min(this.sOneWordCount, this.sTwoWordCount);\n        const MAX = Math.max(this.sOneWordCount, this.sTwoWordCount);\n        const DIFF = MAX - MIN;\n        const WORD_LOW = sender =>\n            `${sender}, the quieter one in this conversation... by ${parseInt(\n                (DIFF / MAX) * 100\n            )}%! 🙂`;\n        const WORD_HIGH = sender =>\n            `Quite a chatty one aren't you, ${sender}! 😉 On average, you were ${parseInt(\n                (DIFF / MIN) * 100\n            )}% as... verbose!`;\n        this.sOneWordComment =\n            this.sOneWordCount >= this.sTwoWordCount\n                ? WORD_HIGH(this.sOne)\n                : WORD_LOW(this.sOne);\n        this.sTwoWordComment =\n            this.sTwoWordCount >= this.sOneWordCount\n                ? WORD_HIGH(this.sTwo)\n                : WORD_LOW(this.sTwo);\n    };\n\n    generateWPMComments = () => {\n        const MIN = Math.min(this.sOneWPMCount, this.sTwoWPMCount);\n        const MAX = Math.max(this.sOneWPMCount, this.sTwoWPMCount);\n        const DIFF = MAX - MIN;\n        const WPM_LOW = sender =>\n            `Obviously the quieter one, ${sender}! 😉 On average, your texts are ${parseInt(\n                (DIFF / MAX) * 100\n            )}% shorter.`;\n        const WPM_HIGH = sender =>\n            `Quite a chatty one aren't you, ${sender}! 😉 On average, your texts are ${parseInt(\n                (DIFF / MIN) * 100\n            )}% longer.`;\n        this.sOneWPMComment =\n            this.sOneWPMCount >= this.sTwoWPMCount\n                ? WPM_HIGH(this.sOne)\n                : WPM_LOW(this.sOne);\n        this.sTwoWPMComment =\n            this.sTwoWPMCount >= this.sOneWPMCount\n                ? WPM_HIGH(this.sTwo)\n                : WPM_LOW(this.sTwo);\n    };\n\n    generateMediaComments = () => {\n        const MIN = Math.min(this.sOneMediaCount, this.sTwoMediaCount);\n        const MAX = Math.max(this.sOneMediaCount, this.sTwoMediaCount);\n        const DIFF = MAX - MIN;\n        const MEDIA_LOW = sender =>\n            `Perhaps words suit you better, ${sender}! 😉 On average, you sent ${parseInt(\n                (DIFF / MAX) * 100\n            )}% fewer photos, videos, and stickers!`;\n        const MEDIA_HIGH = sender =>\n            `Maybe you express yourself better with 📸📸📸, ${sender}? On average, you sent ${parseInt(\n                (DIFF / MIN) * 100\n            )}% more photos, videos, and stickers!`;\n        this.sOneMediaComment =\n            this.sOneMediaCount >= this.sTwoMediaCount\n                ? MEDIA_HIGH(this.sOne)\n                : MEDIA_LOW(this.sOne);\n        this.sTwoMediaComment =\n            this.sTwoMediaCount >= this.sOneMediaCount\n                ? MEDIA_HIGH(this.sTwo)\n                : MEDIA_LOW(this.sTwo);\n    };\n\n\n    generateAverageRTComments = () => {\n        const MIN = Math.min(this.sOneAverageRT, this.sTwoAverageRT);\n        const MAX = Math.max(this.sOneAverageRT, this.sTwoAverageRT);\n        const DIFF = MAX - MIN;\n        const AVERAGE_RT_LOW = sender =>\n            `Always on your phone, I see, ${sender}! 🤓 On average, you are ${parseInt(\n                (DIFF / MAX) * 100\n            )}% quicker to respond!`;\n        const AVERAGE_RT_HIGH = sender =>\n            `Quite the busy one, ${sender}! 😎 On average, you take ${parseInt(\n                (DIFF / MIN) * 100\n            )}% longer to return your texts!`;\n        this.sOneAverageRTComment =\n            this.sOneAverageRT >= this.sTwoAverageRT\n                ? AVERAGE_RT_HIGH(this.sOne)\n                : AVERAGE_RT_LOW(this.sOne);\n        this.sTwoAverageRTComment =\n            this.sTwoAverageRT >= this.sOneAverageRT\n                ? AVERAGE_RT_HIGH(this.sTwo)\n                : AVERAGE_RT_LOW(this.sTwo);\n    };\n\n    generateComments = () => {\n        this.generateMessageComments();\n        this.generateWordComments();\n        this.generateWPMComments();\n        this.generateMediaComments();\n        this.generateAverageRTComments();\n    };\n}\n\nexport default Analyzer;\n","import Modali, { useModali } from \"modali\";\nimport React from \"react\";\nimport step1 from \"./guide/step1.jpg\";\nimport step2 from \"./guide/step2.jpg\";\nimport step3 from \"./guide/step3.jpg\";\nimport step4 from \"./guide/step4.jpg\";\nimport step5 from \"./guide/step5.jpg\";\n\nconst HelpModal = props => {\n  const toggleHelpModalOneTwo = () => {\n    toggleHelpModalStepOne();\n    toggleHelpModalStepTwo();\n  };\n  const toggleHelpModalTwoThree = () => {\n    toggleHelpModalStepTwo();\n    toggleHelpModalStepThree();\n  };\n  const toggleHelpModalThreeFour = () => {\n    toggleHelpModalStepThree();\n    toggleHelpModalStepFour();\n  };\n  const toggleHelpModalFourFive = () => {\n    toggleHelpModalStepFour();\n    toggleHelpModalStepFive();\n  };\n\n  const [helpModalStepOne, toggleHelpModalStepOne] = useModali({\n    animated: true,\n    centered: true,\n    large: true,\n    title: \"1. 👋👋 Open up any ONE-ON-ONE 💬 on WhatsApp\",\n    buttons: [\n      <Modali.Button isStyleDefault label=\">\" onClick={toggleHelpModalOneTwo} />\n    ]\n  });\n\n  const [helpModalStepTwo, toggleHelpModalStepTwo] = useModali({\n    animated: true,\n    centered: true,\n    large: true,\n    title: \"2. Skip this step if you're able to see all options. 😉\",\n    buttons: [\n      <Modali.Button\n        isStyleDefault\n        label=\"<\"\n        onClick={toggleHelpModalOneTwo}\n      />,\n      <Modali.Button\n        isStyleDefault\n        label=\">\"\n        onClick={toggleHelpModalTwoThree}\n      />\n    ]\n  });\n\n  const [helpModalStepThree, toggleHelpModalStepThree] = useModali({\n    animated: true,\n    centered: true,\n    large: true,\n    title: \"3. Select the 'Export Chat' option\",\n    buttons: [\n      <Modali.Button\n        isStyleDefault\n        label=\"<\"\n        onClick={toggleHelpModalTwoThree}\n      />,\n      <Modali.Button\n        isStyleDefault\n        label=\">\"\n        onClick={toggleHelpModalThreeFour}\n      />\n    ]\n  });\n\n  const [helpModalStepFour, toggleHelpModalStepFour] = useModali({\n    animated: true,\n    centered: true,\n    large: true,\n    title: \"4. No media is needed here 🤓\",\n    buttons: [\n      <Modali.Button\n        isStyleDefault\n        label=\"<\"\n        onClick={toggleHelpModalThreeFour}\n      />,\n      <Modali.Button\n        isStyleDefault\n        label=\">\"\n        onClick={toggleHelpModalFourFive}\n      />\n    ]\n  });\n\n  const [helpModalStepFive, toggleHelpModalStepFive] = useModali({\n    animated: true,\n    centered: true,\n    large: true,\n    title:\n      \"5. Send the exported text file to yourself, and press 'Upload' when you're ready! 🙂\",\n    buttons: [\n      <Modali.Button\n        isStyleDefault\n        label=\"<\"\n        onClick={toggleHelpModalFourFive}\n      />,\n      <Modali.Button\n        isStyleDefault\n        label=\"Upload\"\n        onClick={props.uploadOverlayClickHandler}\n      />\n    ]\n  });\n\n  return (\n    <div className=\"app\">\n      <button id=\"Main-help-button\" onClick={toggleHelpModalStepOne} />\n      <Modali.Modal {...helpModalStepOne}>\n        <img alt=\"Step 1\" src={step1} />\n      </Modali.Modal>\n      <Modali.Modal {...helpModalStepTwo}>\n        <img alt=\"Step 2\" src={step2} />\n      </Modali.Modal>\n      <Modali.Modal {...helpModalStepThree}>\n        <img alt=\"Step 3\" src={step3} />\n      </Modali.Modal>\n      <Modali.Modal {...helpModalStepFour}>\n        <img alt=\"Step 4\" src={step4} />\n      </Modali.Modal>\n      <Modali.Modal {...helpModalStepFive}>\n        <img alt=\"Step 5\" src={step5} />\n      </Modali.Modal>\n    </div>\n  );\n};\n\nexport default HelpModal;\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.png\";\r\nimport HelpModal from \"./HelpModal\";\r\nimport './App.css'\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Main\">\r\n        <header className=\"Main-header\">\r\n          <img src={logo} className=\"Main-logo\" alt=\"logo\" />\r\n          <p/>\r\n          <div>\r\n            <input\r\n              id=\"App-upload-button\"\r\n              type=\"file\"\r\n              onChange={this.props.uploadBtnClickHandler}\r\n            />\r\n            <button\r\n              className=\"Main-button\"\r\n              onClick={this.props.uploadOverlayClickHandler}\r\n            >\r\n              Upload\r\n            </button>\r\n            <button\r\n              id=\"Main-help-button-overlay\"\r\n              className=\"Main-button\"\r\n              onClick={this.props.helpBtnClickHandler}\r\n            >\r\n              Help\r\n            </button>\r\n            <HelpModal\r\n              showModal={this.props.showHelp}\r\n              uploadOverlayClickHandler={this.props.uploadOverlayClickHandler}\r\n            />\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, {Component} from \"react\";\r\nimport {ScatterPlot} from \"react-d3-components\";\r\n\r\nclass MetricGraphing extends Component {\r\n    state = {\r\n        chartWidth: 800,\r\n        chartHeight: 500,\r\n        sOneData: null,\r\n        sTwoData: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.generateData();\r\n    }\r\n\r\n    generateData = () => {\r\n        var DEBUG = false;\r\n        if (DEBUG) {\r\n            var sOne = \"sONE\";\r\n            var sOneX = [\r\n                new Date(2020, 10, 11, 23),\r\n                new Date(2020, 10, 12, 0),\r\n                new Date(2020, 10, 12, 1)\r\n            ];\r\n            var sOneY = [0, 1, 72];\r\n            var sTwo = \"sTWO\";\r\n            var sTwoX = [\r\n                new Date(2020, 10, 11, 22),\r\n                new Date(2020, 10, 12, 1),\r\n                new Date(2020, 10, 12, 2)\r\n            ];\r\n            var sTwoY = [15, 0, 1];\r\n            var sOneData = [];\r\n            var sTwoData = [];\r\n        } else {\r\n            var sOne = this.props.sOne;\r\n            var sOneX = this.props.sOneDatetimes;\r\n            var sOneY = this.props.sOneTimings;\r\n            var sTwo = this.props.sTwo;\r\n            var sTwoX = this.props.sTwoDatetimes;\r\n            var sTwoY = this.props.sTwoTimings;\r\n            var sOneData = [];\r\n            var sTwoData = [];\r\n        }\r\n\r\n        for (let i = 0; i < Math.min(sOneX.length, sOneY.length); i++) {\r\n            sOneData.push({\r\n                x: sOneX[i],\r\n                y: sOneY[i]\r\n            });\r\n        }\r\n        for (let i = 0; i < Math.min(sTwoX.length, sTwoY.length); i++) {\r\n            sTwoData.push({\r\n                x: sTwoX[i],\r\n                y: sTwoY[i]\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            sOneData: sOneData,\r\n            sTwoData: sTwoData\r\n        });\r\n    };\r\n\r\n    tooltipScatter = (x, y) => {\r\n        x = x.toDateString();\r\n        return `${x} | ${y.toFixed(1)} Hours`;\r\n    };\r\n\r\n    render() {\r\n        if (this.state.sOneData && this.state.sTwoData) {\r\n            console.log(this.state.sOneData);\r\n            console.log(this.state.sTwoData);\r\n\r\n            return (\r\n                <div>\r\n                    {/* TODO : PLACE THIS DIV ONTO A FRONT CARD*/}\r\n                    {/*TODO : PLACE THE NAME ON TOP RIGHT CORNER*/}\r\n\r\n                    <label className=\"card-container\">\r\n                        <input type=\"checkbox\"/>\r\n                        <div className=\"card\">\r\n                            <div className=\"front\">\r\n                                <div className=\"Graphing-name\">{this.props.sOne}</div>\r\n                                <ScatterPlot\r\n                                    data={{\r\n                                        label: \"\",\r\n                                        values: this.state.sOneData\r\n                                    }}\r\n                                    width={this.state.chartWidth}\r\n                                    height={this.state.chartHeight}\r\n                                    margin={{top: 10, bottom: 50, left: 50, right: 10}}\r\n                                    tooltipHtml={this.tooltipScatter}\r\n                                    xAxis={{label: \"Date\"}}\r\n                                    yAxis={{label: \"Reply Timing (Hours)\"}}\r\n                                />\r\n                            </div>\r\n                            <div className=\"back\">\r\n                                <div className=\"Graphing-name\">{this.props.sTwo}</div>\r\n                                <div className=\"ScatterPlot\">\r\n                                    <ScatterPlot\r\n                                        data={{\r\n                                            label: \"\",\r\n                                            values: this.state.sTwoData\r\n                                        }}\r\n                                        width={this.state.chartWidth}\r\n                                        height={this.state.chartHeight}\r\n                                        margin={{top: 10, bottom: 50, left: 50, right: 10}}\r\n                                        tooltipHtml={this.tooltipScatter}\r\n                                        xAxis={{label: \"Date\"}}\r\n                                        yAxis={{label: \"Reply Timing (Hours)\"}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                    {/*/!* TODO : PLACE THIS DIV ONTO A BACK CARD*!/*/}\r\n                    {/*TODO : PLACE THE NAME ON TOP RIGHT CORNER*/}\r\n                </div>\r\n            );\r\n        } else {\r\n            return <div>WAITING...</div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MetricGraphing;\r\n","import React, { Component } from \"react\";\n\nclass MetricNumerical extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"Metric-daterange\">\n          {`${this.props.startDate} - ${this.props.endDate}`}\n        </div>\n        <div className=\"left circle-container\">\n          <div className=\"circle\">\n            <div className={`front C${this.props.index}`}>\n              <p>{this.props.sOne}</p>\n            </div>\n            <div className={`back C${this.props.index}`}>\n              <div className=\"metric-qty\">{this.props.sOneMetric}</div>\n              <div className=\"metric-title\">{this.props.title}</div>\n              <div className=\"metric-comment\">{this.props.sOneComment}</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"right circle-container\">\n          <div className=\"circle\">\n            <div className={`front C${this.props.index}`}>\n              <p>{this.props.sTwo}</p>\n            </div>\n            <div className={`back C${this.props.index}`}>\n              <div className=\"metric-qty\">{this.props.sTwoMetric}</div>\n              <div className=\"metric-title\">{this.props.title}</div>\n              <div className=\"metric-comment\">{this.props.sTwoComment}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MetricNumerical;\n","import MetricGraphing from \"./MetricGraphing\";\r\nimport MetricNumerical from \"./MetricNumerical\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass MetricInterface extends Component {\r\n  render() {\r\n    if (this.props.graphing) {\r\n      return (\r\n        <MetricGraphing\r\n          index={this.props.index}\r\n          startDate={this.props.startDate}\r\n          endDate={this.props.endDate}\r\n          title={this.props.title}\r\n          sOne={this.props.sOne}\r\n          sTwo={this.props.sTwo}\r\n          sOneDatetimes={this.props.sOneDatetimes}\r\n          sOneTimings={this.props.sOneTimings}\r\n          sTwoDatetimes={this.props.sTwoDatetimes}\r\n          sTwoTimings={this.props.sTwoTimings}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <MetricNumerical\r\n        index={this.props.index}\r\n        startDate={this.props.startDate}\r\n        endDate={this.props.endDate}\r\n        title={this.props.title}\r\n        sOne={this.props.sOne}\r\n        sTwo={this.props.sTwo}\r\n        sOneMetric={this.props.sOneMetric}\r\n        sTwoMetric={this.props.sTwoMetric}\r\n        sOneComment={this.props.sOneComment}\r\n        sTwoComment={this.props.sTwoComment}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetricInterface;\r\n","import \"./App.css\";\r\nimport \"react-awesome-slider/dist/custom-animations/cube-animation.css\";\r\nimport \"react-awesome-slider/dist/styles.css\";\r\nimport Analyzer from \"./backend/Analyzer\";\r\nimport AwesomeSlider from \"react-awesome-slider\";\r\nimport {css} from \"@emotion/core\";\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nimport Main from \"./Main\";\r\nimport MetricInterface from \"./MetricInterface\";\r\nimport React, {Component} from \"react\";\r\n\r\nimport bg1 from \"./metric_bg/bg1.jpg\";\r\nimport bg2 from \"./metric_bg/bg2.jpg\";\r\nimport bg3 from \"./metric_bg/bg3.jpg\";\r\nimport bg4 from \"./metric_bg/bg4.jpg\";\r\nimport bg5 from \"./metric_bg/bg5.jpg\";\r\nimport bg6 from \"./metric_bg/bg6.jpg\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        uploadedFile: null,\r\n        rawText: null,\r\n        analyzer: null,\r\n        showHelp: true,\r\n        showMain: true,\r\n        showMetric: false\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.analyzer && this.state.rawText) {\r\n            this.generateAnalyzer();\r\n        } else if (!this.state.rawText && this.state.uploadedFile) {\r\n            this.generateRawText();\r\n        }\r\n    }\r\n\r\n    uploadOverlayClickHandler = ___ => {\r\n        document.getElementById(\"App-upload-button\").click();\r\n    };\r\n\r\n    uploadBtnClickHandler = event => {\r\n        this.setState({\r\n            uploadedFile: event.target.files[0]\r\n        });\r\n    };\r\n\r\n    helpBtnClickHandler = _ => {\r\n        this.setState({\r\n            showHelp: true\r\n        });\r\n        document.getElementById(\"Main-help-button\").click();\r\n    };\r\n\r\n    generateRawText = () => {\r\n        const reader = new FileReader();\r\n        reader.onload = (___ => {\r\n            return e => {\r\n                this.setState({\r\n                    rawText: e.target.result\r\n                });\r\n            };\r\n        })(reader);\r\n        reader.readAsText(this.state.uploadedFile);\r\n    };\r\n\r\n    generateAnalyzer = async () => {\r\n        const analyzer = new Analyzer(this.state.rawText);\r\n        await analyzer.startPipeline();\r\n        this.setState({\r\n            analyzer: analyzer,\r\n            showMetric: true,\r\n            showMain: false,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.state.analyzer && this.state.showMetric) {\r\n            // DEBUG //\r\n            // console.log(this.state.analyzer.sOneMsgCount);\r\n            // console.log(this.state.analyzer.sOneWordCount);\r\n            // console.log(this.state.analyzer.sOneWPMCount);\r\n            // console.log(this.state.analyzer.sOneMediaCount);\r\n            // console.log(this.state.analyzer.sOneAverageRT);\r\n            // console.log(this.state.analyzer.sOneTimings);\r\n            // console.log(this.state.analyzer.sOneDatetimes);\r\n            //\r\n            // console.log(this.state.analyzer.sTwoMsgCount);\r\n            // console.log(this.state.analyzer.sTwoWordCount);\r\n            // console.log(this.state.analyzer.sTwoWPMCount);\r\n            // console.log(this.state.analyzer.sTwoMediaCount);\r\n            // console.log(this.state.analyzer.sTwoAverageRT);\r\n            // console.log(this.state.analyzer.sTwoTimings);\r\n            // console.log(this.state.analyzer.sTwoDatetimes);\r\n            // DEBUG //\r\n\r\n            return (\r\n                <div className=\"Metric\">\r\n                    <AwesomeSlider animation=\"cubeAnimation\">\r\n                        <div className=\"Metric-bg\" data-src={bg1}>\r\n                            <MetricInterface\r\n                                index={\"1\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Messages\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneMetric={this.state.analyzer.sOneMsgCount}\r\n                                sTwoMetric={this.state.analyzer.sTwoMsgCount}\r\n                                sOneComment={this.state.analyzer.sOneMsgComment}\r\n                                sTwoComment={this.state.analyzer.sTwoMsgComment}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Metric-bg\" data-src={bg2}>\r\n                            <MetricInterface\r\n                                index={\"2\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Words\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneMetric={this.state.analyzer.sOneWordCount}\r\n                                sTwoMetric={this.state.analyzer.sTwoWordCount}\r\n                                sOneComment={this.state.analyzer.sOneWordComment}\r\n                                sTwoComment={this.state.analyzer.sTwoWordComment}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Metric-bg\" data-src={bg3}>\r\n                            <MetricInterface\r\n                                index={\"3\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Words per message\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneMetric={this.state.analyzer.sOneWPMCount}\r\n                                sTwoMetric={this.state.analyzer.sTwoWPMCount}\r\n                                sOneComment={this.state.analyzer.sOneWPMComment}\r\n                                sTwoComment={this.state.analyzer.sTwoWPMComment}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Metric-bg\" data-src={bg4}>\r\n                            <MetricInterface\r\n                                index={\"4\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Media\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneMetric={this.state.analyzer.sOneMediaCount}\r\n                                sTwoMetric={this.state.analyzer.sTwoMediaCount}\r\n                                sOneComment={this.state.analyzer.sOneMediaComment}\r\n                                sTwoComment={this.state.analyzer.sTwoMediaComment}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Metric-bg\" data-src={bg5}>\r\n                            <MetricInterface\r\n                                index={\"7\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Average Reply Timing (Hours)\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneMetric={this.state.analyzer.sOneAverageRT}\r\n                                sTwoMetric={this.state.analyzer.sTwoAverageRT}\r\n                                sOneComment={this.state.analyzer.sOneAverageRTComment}\r\n                                sTwoComment={this.state.analyzer.sTwoAverageRTComment}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Metric-bg\" data-src={bg6}>\r\n                            <MetricInterface\r\n                                graphing={true}\r\n                                index={\"8\"}\r\n                                startDate={this.state.analyzer.startDate}\r\n                                endDate={this.state.analyzer.endDate}\r\n                                title={\"Reply Timing Chart\"}\r\n                                sOne={this.state.analyzer.sOne}\r\n                                sTwo={this.state.analyzer.sTwo}\r\n                                sOneDatetimes={this.state.analyzer.sOneDatetimes}\r\n                                sOneTimings={this.state.analyzer.sOneTimings}\r\n                                sTwoDatetimes={this.state.analyzer.sTwoDatetimes}\r\n                                sTwoTimings={this.state.analyzer.sTwoTimings}\r\n                            />\r\n                        </div>\r\n                    </AwesomeSlider>\r\n                </div>\r\n            );\r\n        } else if (this.state.showMain) {\r\n            // OVERRIDING CSS FOR HOMEPAGE\r\n            const override = css`\r\n                position: relative;\r\n                margin: 0 auto;\r\n                margin-left: 46vw;\r\n                margin-top: -70vh;\r\n                `;\r\n            return (\r\n                <div>\r\n                    {/*DISPLAY HOMEPAGE*/}\r\n                    <Main\r\n                        uploadBtnClickHandler={this.uploadBtnClickHandler}\r\n                        uploadOverlayClickHandler={this.uploadOverlayClickHandler}\r\n                        helpBtnClickHandler={this.helpBtnClickHandler}\r\n                        showHelp={this.state.showHelp}\r\n                    />\r\n\r\n                    {/*DISPLAY LOADING SPINNER*/}\r\n                    {this.state.uploadedFile && (\r\n                        <GridLoader\r\n                            css={override}\r\n                            size={30}\r\n                            color={\"#1B1464\"}/>)}\r\n\r\n                    {/*<GridLoader*/}\r\n                    {/*    css={override}*/}\r\n                    {/*    size={30}*/}\r\n                    {/*    color={\"#1B1464\"}/>*/}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyC5dwq14duK6nYbwSwYKjOEs8_A97Ho7wU\",\n  authDomain: \"telestat-817a8.firebaseapp.com\",\n  databaseURL: \"https://telestat-817a8.firebaseio.com\",\n  projectId: \"telestat-817a8\",\n  storageBucket: \"telestat-817a8.appspot.com\",\n  messagingSenderId: \"433175668589\",\n  appId: \"1:433175668589:web:4c07351901f9e195239c64\",\n  measurementId: \"G-Y8JW90LD8X\"\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}